{
  "stats": {
    "suites": 12,
    "tests": 51,
    "passes": 43,
    "pending": 0,
    "failures": 2,
    "start": "2022-01-20T02:07:09.437Z",
    "end": "2022-01-20T06:18:08.607Z",
    "duration": 3328,
    "testsRegistered": 51,
    "passPercent": 84.31372549019608,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 6,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "3361c2e5-20ef-404e-a5f6-880040924796",
      "title": "",
      "fullFile": "cypress/integration/login.spec.js",
      "file": "cypress/integration/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ac7d388-96c3-4c22-b93d-689e673cfc29",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "03bfc795-5685-4b4c-8127-cc897a6c2eba",
              "parentUUID": "8ac7d388-96c3-4c22-b93d-689e673cfc29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03bfc795-5685-4b4c-8127-cc897a6c2eba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "19c2f06b-7e6d-485b-b5e9-36d67f65d541",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "8f6f1228-0e58-412e-9c67-546dd0ba6187",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar os produtos cadastrados",
              "fullTitle": "Testes da Funcionalidade Produtos Deve listar os produtos cadastrados",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[9].nome).to.equal('Produto EBAC 436746')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "200a7559-c780-4f61-8cdf-7d5fe0e3ffd6",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um produto com sucesso",
              "fullTitle": "Testes da Funcionalidade Produtos Deve cadastrar um produto com sucesso",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "8607d9e8-c379-4d6d-9915-d7f4b1b3adaa",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC Novo 1', 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "a38bc9de-8ebf-4705-9789-ee543ce4ddf8",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto Editado 45642083\",\n      \"preco\": 100,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "f2c14aff-b9a7-4a85-a06f-708a1eee35fa",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 300\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "b0df1c8e-25f4-44a9-9be1-b936ae5c909d",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "a95fe01a-35c9-4f7a-83ec-79991f62d785",
              "parentUUID": "f61e27d0-0355-48a3-b308-bf7ad67ce64b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f6f1228-0e58-412e-9c67-546dd0ba6187",
            "200a7559-c780-4f61-8cdf-7d5fe0e3ffd6",
            "8607d9e8-c379-4d6d-9915-d7f4b1b3adaa",
            "a38bc9de-8ebf-4705-9789-ee543ce4ddf8",
            "f2c14aff-b9a7-4a85-a06f-708a1eee35fa",
            "b0df1c8e-25f4-44a9-9be1-b936ae5c909d",
            "a95fe01a-35c9-4f7a-83ec-79991f62d785"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 434,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "526cf980-4a69-4e48-b8f9-c4aee5e8f158",
      "title": "",
      "fullFile": "cypress/integration/exercicio-api.spec.js",
      "file": "cypress/integration/exercicio-api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 169,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "383e4d6e-4915-4a20-828b-34ea27fe7d5c",
              "parentUUID": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  expect(response.duration).to.be.lessThan(15);\n});",
              "err": {},
              "uuid": "a91f3203-664c-4efb-924c-49d6ec73781f",
              "parentUUID": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": fullEmail,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "11990121-3a1f-491a-b9cc-60a472efc555",
              "parentUUID": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario('Koala', 'marilou@qa.com.br', 'teste', 'true').then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "9e6b32f1-016c-4aac-b2a7-d6fce7a27534",
              "parentUUID": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(nome, fullEmail, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": fullEmail,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "4b90e747-ca18-4a43-85f6-a4edd5380cbe",
              "parentUUID": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(nome, fullEmail, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "353e7410-2f17-49ce-b2c0-dc10e927e058",
              "parentUUID": "a5fb4952-4301-4b1e-bed3-6a85b3792f59",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "383e4d6e-4915-4a20-828b-34ea27fe7d5c",
            "a91f3203-664c-4efb-924c-49d6ec73781f",
            "11990121-3a1f-491a-b9cc-60a472efc555",
            "9e6b32f1-016c-4aac-b2a7-d6fce7a27534",
            "4b90e747-ca18-4a43-85f6-a4edd5380cbe",
            "353e7410-2f17-49ce-b2c0-dc10e927e058"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 405,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9f6b3587-7de6-4507-93bf-3affbea9ea2f",
      "title": "",
      "fullFile": "cypress/integration/login.spec.js",
      "file": "cypress/integration/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56e3667d-e5cc-41c0-ad1f-be0d1e9b861a",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 149,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"taniar@qa.com.br\",\n    \"password\": \"teste1\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "f54dbdb3-959e-4aa1-8429-709a04c2e8d5",
              "parentUUID": "56e3667d-e5cc-41c0-ad1f-be0d1e9b861a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f54dbdb3-959e-4aa1-8429-709a04c2e8d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 149,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ba68655b-8657-4370-b12c-03c490e35e64",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 360,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:3000/login\n\nThe response we received from your web server was:\n\n  > 401: Unauthorized\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:3000/login\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/8.7.0 Chrome/93.0.4577.82 Electron/14.1.0 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 44\n}\nBody: {\"email\":\"fulano@qa.com\",\"password\":\"teste\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 401 - Unauthorized\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"x-dns-prefetch-control\": \"off\",\n  \"x-frame-options\": \"SAMEORIGIN\",\n  \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n  \"x-download-options\": \"noopen\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-moesif-transaction-id\": \"213a811f-0243-4f89-82f3-b63bcb87964f\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"48\",\n  \"date\": \"Thu, 20 Jan 2022 05:18:07 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\"\n}\nBody: {\n  \"message\": \"Email e/ou senha inválidos\"\n}\n\n\nhttps://on.cypress.io/request\n\nBecause this error occurred during a `before all` hook we are skipping the remaining tests in the current suite: `Testes da Funcionalidade Pr...`",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:3000/login\n\nThe response we received from your web server was:\n\n  > 401: Unauthorized\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:3000/login\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/8.7.0 Chrome/93.0.4577.82 Electron/14.1.0 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 44\n}\nBody: {\"email\":\"fulano@qa.com\",\"password\":\"teste\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 401 - Unauthorized\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"x-dns-prefetch-control\": \"off\",\n  \"x-frame-options\": \"SAMEORIGIN\",\n  \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n  \"x-download-options\": \"noopen\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-moesif-transaction-id\": \"213a811f-0243-4f89-82f3-b63bcb87964f\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"48\",\n  \"date\": \"Thu, 20 Jan 2022 05:18:07 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\"\n}\nBody: {\n  \"message\": \"Email e/ou senha inválidos\"\n}\n\n\nhttps://on.cypress.io/request\n\nBecause this error occurred during a `before all` hook we are skipping the remaining tests in the current suite: `Testes da Funcionalidade Pr...`\n    at http://localhost:3000/__cypress/runner/cypress_runner.js:157339:80\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:13212:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:11147:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:11204:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:11249:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:11329:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:7919:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:7912:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:7928:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:7798:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress\\support\\index.js:125:6)",
                "diff": null
              },
              "uuid": "55d3049e-925e-4ace-9c2b-267d4f5e9993",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar os produtos cadastrados",
              "fullTitle": "Testes da Funcionalidade Produtos Deve listar os produtos cadastrados",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[9].nome).to.equal('Produto EBAC 436746')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "52ca5140-dce4-4042-95fe-800a5fd5af2a",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Deve cadastrar um produto com sucesso",
              "fullTitle": "Testes da Funcionalidade Produtos Deve cadastrar um produto com sucesso",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "316e5427-b852-4723-9d6e-dce824e88d1a",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC Novo 1', 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "6d230b69-61bf-4d22-98a4-c093ba2e5498",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto Editado 45642083\",\n      \"preco\": 100,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "7fc76578-af13-4917-862f-41d76b72781d",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 300\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "d563f76d-8c9f-4dc7-8748-7a0451019365",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "0ba4c5e2-f18d-48a8-8d31-3362854eb726",
              "parentUUID": "5b2287f4-088c-429b-b4c2-1c4bbaf99860",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "55d3049e-925e-4ace-9c2b-267d4f5e9993"
          ],
          "pending": [],
          "skipped": [
            "52ca5140-dce4-4042-95fe-800a5fd5af2a",
            "316e5427-b852-4723-9d6e-dce824e88d1a",
            "6d230b69-61bf-4d22-98a4-c093ba2e5498",
            "7fc76578-af13-4917-862f-41d76b72781d",
            "d563f76d-8c9f-4dc7-8748-7a0451019365",
            "0ba4c5e2-f18d-48a8-8d31-3362854eb726"
          ],
          "duration": 360,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "399968b1-40ac-4bd8-af89-05e3464c3f8c",
      "title": "",
      "fullFile": "cypress/integration/exercicio-api.spec.js",
      "file": "cypress/integration/exercicio-api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "bd4573ee-b651-44b2-a2cd-3e3eee879404",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  expect(response.duration).to.be.lessThan(15);\n});",
              "err": {},
              "uuid": "d460774e-d119-4f66-84ee-62c41c7dc9ef",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": fullEmail,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "6729ce3e-b281-4745-81ee-6783814e1624",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario('Koala', 'marilou@qa.com.br', 'teste', 'true').then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "353e0054-4f3c-4f64-886c-934c38c84d18",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(nome, fullEmail, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": fullEmail,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "51a85153-c065-4a1b-85d1-21553c3ac805",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(nome, fullEmail, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "698dfa31-1050-40e9-b73f-9d9ac6ee2bea",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd4573ee-b651-44b2-a2cd-3e3eee879404",
            "d460774e-d119-4f66-84ee-62c41c7dc9ef",
            "6729ce3e-b281-4745-81ee-6783814e1624",
            "353e0054-4f3c-4f64-886c-934c38c84d18",
            "51a85153-c065-4a1b-85d1-21553c3ac805",
            "698dfa31-1050-40e9-b73f-9d9ac6ee2bea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 302,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9fd3bfa2-1c92-41da-85b5-c603ba42fe1e",
      "title": "",
      "fullFile": "cypress/integration/login.spec.js",
      "file": "cypress/integration/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b854c331-77a8-45f5-9492-40c064acbd9f",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 63,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"taniar@qa.com.br\",\n    \"password\": \"teste1\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "f987d33c-3f04-474e-8e82-19cace17bf66",
              "parentUUID": "b854c331-77a8-45f5-9492-40c064acbd9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f987d33c-3f04-474e-8e82-19cace17bf66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 63,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e36d1115-2431-4686-a9f5-0e88454f5b85",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "f14ddbe9-cd9f-4ffd-ba30-7a804170636b",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar os produtos cadastrados",
              "fullTitle": "Testes da Funcionalidade Produtos Deve listar os produtos cadastrados",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[9].nome).to.equal('Produto EBAC 436746')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "975ac6b4-e321-4296-aa24-5bac72e1487f",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um produto com sucesso",
              "fullTitle": "Testes da Funcionalidade Produtos Deve cadastrar um produto com sucesso",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "0e4fb746-84f2-49cf-b5d2-f2a4d1ac14f8",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC Novo 1', 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "0d2aeeb3-323a-4448-bf53-5bfdcbc4a82c",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto Editado 45642083\",\n      \"preco\": 100,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "7ba9059f-307d-4cf9-864a-8a54349e2257",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 300\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "96c0cef1-6174-4bde-922d-04a18ebccac7",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "07d84388-0c0a-415f-a2b3-4b149f42a1f2",
              "parentUUID": "00c864e1-36a8-4ecd-8bec-18f928744f6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f14ddbe9-cd9f-4ffd-ba30-7a804170636b",
            "975ac6b4-e321-4296-aa24-5bac72e1487f",
            "0e4fb746-84f2-49cf-b5d2-f2a4d1ac14f8",
            "0d2aeeb3-323a-4448-bf53-5bfdcbc4a82c",
            "7ba9059f-307d-4cf9-864a-8a54349e2257",
            "96c0cef1-6174-4bde-922d-04a18ebccac7",
            "07d84388-0c0a-415f-a2b3-4b149f42a1f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 435,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "777d19f0-d977-4a57-9f5f-e45569f58fda",
      "title": "",
      "fullFile": "cypress/integration/exercicio-api.spec.js",
      "file": "cypress/integration/exercicio-api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "80193625-973c-44ab-b6f7-58f1403e0287",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "e19d2cca-4cfc-407d-814c-2e4c9e402437",
              "parentUUID": "80193625-973c-44ab-b6f7-58f1403e0287",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  expect(response.duration).to.be.lessThan(15);\n});",
              "err": {},
              "uuid": "4b9cf924-f350-404f-b49d-bee9e7c6a8c4",
              "parentUUID": "80193625-973c-44ab-b6f7-58f1403e0287",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.usuarioRandom().then(response => {\n  expect(response.status).to.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "b4fd056f-6ef1-4204-8e04-bda993719c38",
              "parentUUID": "80193625-973c-44ab-b6f7-58f1403e0287",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario('Koala', 'marilou@qa.com.br', 'teste', 'true').then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "e4f0bd28-5f8f-45b8-9be0-c4eb60779b5c",
              "parentUUID": "80193625-973c-44ab-b6f7-58f1403e0287",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\ncy.usuarioRandom().then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": fullEmail,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "a7e1b1b0-2243-459a-9f7f-93d2ef7da920",
              "parentUUID": "80193625-973c-44ab-b6f7-58f1403e0287",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.usuarioRandom().then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "13cf97c4-7cee-466b-800c-9a7cb1e4f67b",
              "parentUUID": "80193625-973c-44ab-b6f7-58f1403e0287",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e19d2cca-4cfc-407d-814c-2e4c9e402437",
            "4b9cf924-f350-404f-b49d-bee9e7c6a8c4",
            "b4fd056f-6ef1-4204-8e04-bda993719c38",
            "e4f0bd28-5f8f-45b8-9be0-c4eb60779b5c",
            "a7e1b1b0-2243-459a-9f7f-93d2ef7da920",
            "13cf97c4-7cee-466b-800c-9a7cb1e4f67b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5e3b5837-0139-41e8-b77a-3e8d8301bbec",
      "title": "",
      "fullFile": "cypress/integration/login.spec.js",
      "file": "cypress/integration/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d0a5db80-94bb-4385-aada-4604593df556",
          "title": "Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 71,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'login',\n  body: {\n    \"email\": \"taniar@qa.com.br\",\n    \"password\": \"teste1\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "6530ca8d-8498-43f8-ace7-ed290ef8f9f0",
              "parentUUID": "d0a5db80-94bb-4385-aada-4604593df556",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6530ca8d-8498-43f8-ace7-ed290ef8f9f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c9e25601-faee-43fb-9bae-1a3b16554b94",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
          "title": "Testes da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 67,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "dc1a89fa-1696-4247-8ee4-9283f7c3987a",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar os produtos cadastrados",
              "fullTitle": "Testes da Funcionalidade Produtos Deve listar os produtos cadastrados",
              "timedOut": null,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[9].nome).to.equal('Produto EBAC 436746')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(20);\n});",
              "err": {},
              "uuid": "92400949-fc16-4a84-b7e8-dd5327ab70ab",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um produto com sucesso",
              "fullTitle": "Testes da Funcionalidade Produtos Deve cadastrar um produto com sucesso",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "c07d8626-d5ff-434e-bc6b-38ecbb2f7e50",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC Novo 1', 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "1e9dc8b6-911f-4152-bf81-e709f432abfa",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto Editado 45642083\",\n      \"preco\": 100,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "a0a5a7ca-a965-4027-8694-973f6d5bf472",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Testes da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 300\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "4ff0c59d-a1b0-4976-aae0-300234d6dcb0",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 41,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "e3a089de-180b-45a3-820f-ee9e9d407696",
              "parentUUID": "07bc383c-4a4c-4a0b-92e3-da0906b182f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc1a89fa-1696-4247-8ee4-9283f7c3987a",
            "92400949-fc16-4a84-b7e8-dd5327ab70ab",
            "c07d8626-d5ff-434e-bc6b-38ecbb2f7e50",
            "1e9dc8b6-911f-4152-bf81-e709f432abfa",
            "a0a5a7ca-a965-4027-8694-973f6d5bf472",
            "4ff0c59d-a1b0-4976-aae0-300234d6dcb0",
            "e3a089de-180b-45a3-820f-ee9e9d407696"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 291,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d151fcd4-87d3-4b6b-af62-c3611dd4036c",
      "title": "",
      "fullFile": "cypress/integration/exercicio-api.spec.js",
      "file": "cypress/integration/exercicio-api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4391022b-824b-4588-afe8-c490378911bb",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 364,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": fullEmail,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {
                "message": "ReferenceError: email is not defined",
                "estack": "ReferenceError: email is not defined\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress\\integration\\exercicio-api.spec.js:120:23)",
                "diff": null
              },
              "uuid": "15aae6eb-9371-4a94-b555-7af2373fea4f",
              "parentUUID": "4391022b-824b-4588-afe8-c490378911bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "15aae6eb-9371-4a94-b555-7af2373fea4f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}