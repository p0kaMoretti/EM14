{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-20T05:20:23.792Z",
    "end": "2022-01-20T05:20:24.151Z",
    "duration": 359,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "399968b1-40ac-4bd8-af89-05e3464c3f8c",
      "title": "",
      "fullFile": "cypress/integration/exercicio-api.spec.js",
      "file": "cypress/integration/exercicio-api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "bd4573ee-b651-44b2-a2cd-3e3eee879404",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  expect(response.duration).to.be.lessThan(15);\n});",
              "err": {},
              "uuid": "d460774e-d119-4f66-84ee-62c41c7dc9ef",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": fullEmail,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "6729ce3e-b281-4745-81ee-6783814e1624",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarUsuario('Koala', 'marilou@qa.com.br', 'teste', 'true').then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "353e0054-4f3c-4f64-886c-934c38c84d18",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(nome, fullEmail, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": fullEmail,\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "51a85153-c065-4a1b-85d1-21553c3ac805",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providers = [\"@apple.com\", \"@gmail.com\", \"@pokemon.com\"];\nconst email = Math.floor(Math.random() * 100000).toString(16);\nconst fullEmail = `${email}${providers[Math.floor(Math.random() * (providers.length - 1))]}`;\nconst nome = `Teste ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarUsuario(nome, fullEmail, 'teste', 'true').then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "698dfa31-1050-40e9-b73f-9d9ac6ee2bea",
              "parentUUID": "e7eae469-3a30-490c-9284-6ed075c0a5c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd4573ee-b651-44b2-a2cd-3e3eee879404",
            "d460774e-d119-4f66-84ee-62c41c7dc9ef",
            "6729ce3e-b281-4745-81ee-6783814e1624",
            "353e0054-4f3c-4f64-886c-934c38c84d18",
            "51a85153-c065-4a1b-85d1-21553c3ac805",
            "698dfa31-1050-40e9-b73f-9d9ac6ee2bea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 302,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}